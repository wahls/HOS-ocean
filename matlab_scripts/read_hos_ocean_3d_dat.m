function dat = read_hos_ocean_3d_dat(fn, verbose)
% READ_HOS_OCEAN_3D_DAT Reads 3d.dat files generated by HOS-ocean.
%   [x, y, t, eta, phi] = read_hos_ocean_3d_dat(fn)
%   [x, y, t, eta, phi] = read_hos_ocean_3d_dat(fn, verbose)
%
% Inputs:
%   fn - path to the 3d.dat file
%
% Outputs:
%   dat     - struct with the following entries
%   dat.x   - IxJ matrix of x-coordinates
%   dat.y   - IxJ matrix of y-coordinates
%   dat.t   - Ntx1 vector of time points
%   dat.eta - IxJxNt array where eta(i,j,n) is the surface elevation at
%             the location x(i,j), y(i,j) and time t(n)
%   dat.phi - IxJxNt array where phi(i,j,n) is the velocity potential at
%             the location x(i,j), y(i,j) and time t(n)
%   verbose - true or false, determines if messages are shown
%
% See also READ_HOS_OCEAN_3D_DAT_DEMO.
%
% This function is provided under the same terms as HOS-ocean (GPLv3).

fid = fopen(fn);
if nargin<2; verbose = true; end

% count number of time steps Nt
if verbose
    fprintf("Counting the number of time steps in the file...\n");
end
Nt = 0;
line = -1;
while true
    line = fgetl(fid);
    if line == -1; break; end
    if strstart(line, "ZONE"); Nt = Nt+1; end
end
frewind(fid);

% initialize variables
dat = struct();
I = nan;
J = nan;
dat.t = zeros(Nt, 1);
xy = nan;
dat.eta = nan;
dat.phi = nan;
nt = 0;
pos = 1;
line = -1;

while true
    % read one line from the file, abort if end is reached
    line = fgetl(fid);
    if line == -1; break; end

    % ignore comments, title and variables lines
    if strstart(line, "#"); continue; end
    if strstart(line, "TITLE"); continue; end
    if strstart(line, "VARIABLES")
        assert(strcmp(line, "VARIABLES=""x"",""y"",""eta"",""phis"""))
        continue
    end

    % process new time step markers
    if strstart(line, "ZONE")

        nt = nt+1;
        pos = 1;
        if verbose
            fprintf("Processing time step %d of %d...\n", nt, Nt);
        end

        if nt == 1 % First time step begins, extract XY dimensions and
                   % allocate memory, no data to save yet
            A = sscanf(line, "ZONE SOLUTIONTIME =%e, I=%d, J=%d");
            dat.t(nt) = A(1);
            I = A(2);
            J = A(3);
            xy = zeros(I*J,2);
            phieta = zeros(I*J,2);
            dat.phi = zeros(I, J, Nt);
            dat.eta = zeros(I, J, Nt);
        else % Save data from previous time step
            A = sscanf(line, "ZONE SOLUTIONTIME =  %e, D=(%d,%d), I=%d, J=%d");
            dat.t(nt) = A(1);
            dat.eta(:,:,nt-1) = reshape(phieta(:,1), I, J);
            dat.phi(:,:,nt-1) = reshape(phieta(:,2), I, J);
        end

        continue
    end

    % process empty lines (= last line of the file)
    if strcmp("", strtrim(line))
        dat.eta(:,:,Nt) = reshape(phieta(:,1), I, J);
        dat.phi(:,:,Nt) = reshape(phieta(:,2), I, J);
        continue
    end

    % process one x-y-eta-phi datum (for the current time step)
    if nt == 1
        A = sscanf(line, "%e %e %e %e");
        xy(pos, 1) = A(1);
        xy(pos, 2) = A(2);
        phieta(pos, 1) = A(3);
        phieta(pos, 2) = A(4);
    else
        A = sscanf(line, "%e %e");
        phieta(pos, 1) = A(1);
        phieta(pos, 2) = A(2);
    end
    pos = pos+1;
end

dat.x = reshape(xy(:, 1), I, J);
dat.y = reshape(xy(:, 2), I, J);
fclose(fid);
end

function b = strstart(s1, s2) 
    b = strncmp(s1, s2, length(s2));
end
